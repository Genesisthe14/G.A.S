using System.Collections;
using System.Collections.Generic;
using UnityEngine;

//Class that is responsible for spawning the obstacles
//in random time intervals

public class Spawner : MonoBehaviour
{
    [SerializeField]
    [Tooltip("Dictionary of objects to spawn")]
    private SerializableDictionary<string, GameObject> spawnObjects;

    [SerializeField]
    [Tooltip("Dictionary of propabilities of the spawn objects with the index of the float array in propabilities list as value")]
    private SerializableDictionary<string, int> spawnObjectsPropabilities;
    
    [SerializeField]
    [Tooltip("List of propabilities of the spawn objects")]
    private List<FloatList> propabilities;
    
    [SerializeField]
    [Tooltip("Timerange for the intervals in which the spawn objects can be spawned")]
    private float[] invokeTimeRange = new float[2];
    public float[] InvokeTimeRange
    {
        get { return invokeTimeRange; }
    }

    [SerializeField]
    [Tooltip("y boundaries in between which the spawn objects can spawn")]
    private float[] ySpawn = new float[2];

    [SerializeField]
    [Tooltip("x boundaries in between which the spawn objects can spawn")]
    private float[] xSpawn = new float[2];

    [SerializeField]
    [Tooltip("Range of the possible velocity of the spawn objects")]
    private float[] velocityRange = new float[2];
    public float[] VelocityRange
    {
        get { return velocityRange; }
    }

    [SerializeField]
    [Tooltip("Total amount of spawn objects allowed in the scene")]
    private int totalAmountSpawnObjects = 5;


    //Current amount of spawn objects in the scene
    [SerializeField]
    private int currentAmountSpawnObjects = 0;
    public int CurrentAmountSpawnObjects
    {
        get { return currentAmountSpawnObjects; }
        set 
        { 
            currentAmountSpawnObjects = value;
            if (currentAmountSpawnObjects < 0) currentAmountSpawnObjects = 0;
            if (currentAmountSpawnObjects > totalAmountSpawnObjects) currentAmountSpawnObjects = totalAmountSpawnObjects;
        }
    } 

    //Whether objects should spawn or not
    private bool spawn = true;
    public bool Spawn
    {
        get { return spawn; }
        set { spawn = value; }
    }

    // Start is called before the first frame update
    private void Start()
    {
        StartCoroutine(InstantiateObjects());
    }

    private IEnumerator InstantiateObjects()
    {
        while (true)
        {
            //if spawn is false then don't spawn anything and continue to the next iteration
            if (!spawn || currentAmountSpawnObjects >= totalAmountSpawnObjects)
            {
                yield return null;
                continue;
            }
            
            /*
             * item meteor = 10%
             * normal meteor = 50%
             * satellite = 40%
             */
            
            GameObject spawnObject = null;
            currentAmountSpawnObjects++;

            int randomNum = Random.Range(0, 100);

            //select the spawn object to spawn based on the random number
            //generated above
            foreach(string spawnObID in spawnObjectsPropabilities.Keys)
            {
                List<float> propability = propabilities[spawnObjectsPropabilities[spawnObID]].floatList;

                if(randomNum >= propability[0] && randomNum < propability[1])
                {
                    spawnObject = spawnObjects[spawnObID];
                    break;
                }
            }

            //spawnObject = spawnObjects["satellite"];

            //Generate the random spawn position with the boundaries for x and y position
            Vector2 spawnPos = new Vector2(Random.Range(xSpawn[0], xSpawn[1]), Random.Range(ySpawn[0], ySpawn[1]));
            
            GameObject temp = Instantiate(spawnObject, spawnPos, spawnObject.transform.rotation);

            //generate the velocity of the spawn object based on the velocity range
            //and up the velocity if the warp is active
            float velocityMultiplier = Random.Range(velocityRange[0], velocityRange[1]);
            velocityMultiplier += RocketBehaviour.IsWarpActive ? RocketBehaviour.CurrentWarpSpeedFactor : 0.0f;
            
            temp.GetComponent<Rigidbody2D>().velocity = Vector2.down * velocityMultiplier;

            //wait certain amount of time generated by the invoke time range to spawn next spawn object
            float invokeTime = Random.Range(invokeTimeRange[0], invokeTimeRange[1]);

            //If warp is active then wait shorter amount of time
            invokeTime -= RocketBehaviour.IsWarpActive ? 1.0f : 0.0f;

            yield return new WaitForSecondsRealtime(invokeTime < 0.0f ? 0.0f : invokeTime);
        }
    }

    [System.Serializable]
    public struct FloatList
    {
        public List<float> floatList;
    }
}
